#pragma checksum "/home/shunjid/Documents/web/dotnet/routine-explorer/Views/Shared/_ValidationAutoComplete.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f7dc94b7c0c7ebe3cc88badc03a4172553d4f7b0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__ValidationAutoComplete), @"mvc.1.0.view", @"/Views/Shared/_ValidationAutoComplete.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_ValidationAutoComplete.cshtml", typeof(AspNetCore.Views_Shared__ValidationAutoComplete))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/shunjid/Documents/web/dotnet/routine-explorer/Views/_ViewImports.cshtml"
using routine_explorer;

#line default
#line hidden
#line 2 "/home/shunjid/Documents/web/dotnet/routine-explorer/Views/_ViewImports.cshtml"
using routine_explorer.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f7dc94b7c0c7ebe3cc88badc03a4172553d4f7b0", @"/Views/Shared/_ValidationAutoComplete.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"31d673d5cd1c900d3fa50cc6ed4da690fdb67f0d", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__ValidationAutoComplete : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("include", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 5916, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f7dc94b7c0c7ebe3cc88badc03a4172553d4f7b03471", async() => {
                BeginContext(35, 1318, true);
                WriteLiteral(@"
   <style>
      * { box-sizing: border-box; }
      body {
      font: 16px Arial; 
      }
      .autocomplete {
      /*the container must be positioned relative:*/
      position: relative;
      display: inline-block;
      }
      input {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      padding: 10px;
      font-size: 16px;
      }
      input[type=text] {
      background-color: #f1f1f1;
      width: 100%;
      }
      input[type=submit] {
      background-color: #00796b;
      color: #fff;
      }
      .autocomplete-items {
      position: absolute;
      border: 1px solid #d4d4d4;
      border-bottom: none;
      border-top: none;
      z-index: 99;
      /*position the autocomplete items to be the same width as the container:*/
      top: 100%;
      left: 0;
      right: 0;
      }
      .autocomplete-items div {
      padding: 10px;
      cursor: pointer;
      background-color: #fff; 
      border-bottom: 1px solid #d4d4d4; 
      }
      .autocomplete-items div:hove");
                WriteLiteral(@"r {
      /*when hovering an item:*/
      background-color: #e9e9e9; 
      }
      .autocomplete-active {
      /*when navigating through the items using the arrow keys:*/
      background-color: #00796b !important; 
      color: #ffffff; 
      }
   </style>
   <script>
      var courses = ");
                EndContext();
                BeginContext(1354, 45, false);
#line 54 "/home/shunjid/Documents/web/dotnet/routine-explorer/Views/Shared/_ValidationAutoComplete.cshtml"
               Write(Html.Raw(Json.Serialize(ViewBag.CoursesJSON)));

#line default
#line hidden
                EndContext();
                BeginContext(1399, 4503, true);
                WriteLiteral(@";
   </script>
   <script>
      function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener(""input"", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement(""DIV"");
      a.setAttribute(""id"", this.id + ""autocomplete-list"");
      a.setAttribute(""class"", ""autocomplete-items"");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
      /*check if the item starts with the same letters as the text field value:*/
   ");
                WriteLiteral(@"   if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
        /*create a DIV element for each matching element:*/
        b = document.createElement(""DIV"");
        /*make the matching letters bold:*/
        b.innerHTML = ""<strong>"" + arr[i].substr(0, val.length) + ""</strong>"";
        b.innerHTML += arr[i].substr(val.length);
        /*insert a input field that will hold the current array item's value:*/
        b.innerHTML += ""<input type='hidden' value='"" + arr[i] + ""'>"";
        /*execute a function when someone clicks on the item value (DIV element):*/
            b.addEventListener(""click"", function(e) {
            /*insert the value for the autocomplete text field:*/
            inp.value = this.getElementsByTagName(""input"")[0].value;
            /*close the list of autocompleted values,
            (or any other open lists of autocompleted values:*/
            closeAllLists();
        });
        a.appendChild(b);
      }
      }
      });
      /*execute a function presses a ke");
                WriteLiteral(@"y on the keyboard:*/
      inp.addEventListener(""keydown"", function(e) {
      var x = document.getElementById(this.id + ""autocomplete-list"");
      if (x) x = x.getElementsByTagName(""div"");
      if (e.keyCode == 40) {
      /*If the arrow DOWN key is pressed,
      increase the currentFocus variable:*/
      currentFocus++;
      /*and and make the current item more visible:*/
      addActive(x);
      } else if (e.keyCode == 38) { //up
      /*If the arrow UP key is pressed,
      decrease the currentFocus variable:*/
      currentFocus--;
      /*and and make the current item more visible:*/
      addActive(x);
      } else if (e.keyCode == 13) {
      /*If the ENTER key is pressed, prevent the form from being submitted,*/
      e.preventDefault();
      if (currentFocus > -1) {
        /*and simulate a click on the ""active"" item:*/
        if (x) x[currentFocus].click();
      }
      }
      });
      function addActive(x) {
      /*a function to classify an item as ""active"":*/
      if (!x) return fals");
                WriteLiteral(@"e;
      /*start by removing the ""active"" class on all items:*/
      removeActive(x);
      if (currentFocus >= x.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = (x.length - 1);
      /*add class ""autocomplete-active"":*/
      x[currentFocus].classList.add(""autocomplete-active"");
      }
      function removeActive(x) {
      /*a function to remove the ""active"" class from all autocomplete items:*/
      for (var i = 0; i < x.length; i++) {
      x[i].classList.remove(""autocomplete-active"");
      }
      }
      function closeAllLists(elmnt) {
      /*close all autocomplete lists in the document,
      except the one passed as an argument:*/
      var x = document.getElementsByClassName(""autocomplete-items"");
      for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
      }
      }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener(""click"", function (e) {
      clos");
                WriteLiteral(@"eAllLists(e.target);
      });
      }
   </script>
   <script>
      autocomplete(document.getElementById(""subject1""), courses);
      autocomplete(document.getElementById(""subject2""), courses);
      autocomplete(document.getElementById(""subject3""), courses);
      autocomplete(document.getElementById(""subject4""), courses);
      autocomplete(document.getElementById(""subject5""), courses);
   </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Include = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
